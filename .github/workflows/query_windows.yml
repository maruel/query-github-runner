name: CI
on:
  push:
  pull_request:

defaults:
  run:
    shell: cmd

jobs:
  query:
    name: Query GitHub runner
    runs-on: windows-latest
    steps:
      - name: Get-PhysicalDisk
        shell: powershell
        run: Get-PhysicalDisk
      - name: Get-Disk
        shell: powershell
        run: Get-Disk
      - name: Get-Partition
        shell: powershell
        run: Get-Partition
      - name: Get-MMAgent
        shell: powershell
        run: Get-MMAgent
      - name: Get-NetIPConfiguration
        shell: powershell
        run: Get-NetIPConfiguration
      - name: Get-CimInstance -ClassName Win32_Processor | Format-List
        shell: powershell
        run: Get-CimInstance -ClassName Win32_Processor | Format-List
      - name: Get-CimInstance -ClassName Win32_PhysicalMemory
        shell: powershell
        run: |
          Get-CimInstance -ClassName Win32_PhysicalMemory | ForEach-Object {
              $obj = $_
              $obj | Select-Object -Property ($obj.psobject.properties.Name.Where({-not $PSItem.StartsWith("Cim") -and $obj.$PSItem -ne $null -and -not [string]::IsNullOrEmpty($obj.$PSItem)}))
          }
      - name: dir /a
        run: dir /a
      - name: dir /a c:\
        run: dir /a c:\
      - name: "Get-LocalUser | Where-Object -Property Enabled -eq $true | Format-List"
        shell: powershell
        run: "Get-LocalUser | Where-Object -Property Enabled -eq $true | Format-List"
      - name: dir /a %USERPROFILE%
        run: dir /a %USERPROFILE%
      - name: dir /a c:\users
        run: dir /a c:\users
      - name: dir /a c:\runners
        run: dir /a c:\runners
      - name: "for %%f in (c:\\runners\\*) do dir /a %%f"
        run: "for %%f in (c:\\runners\\*) do dir /a %%f"
      - name: set
        run: set
      - name: tasklist /v
        run: tasklist /v
      - name: tasklist /svc
        run: tasklist /svc
      - name: tasklist /apps
        run: tasklist /apps
      - name: qwinsta
        run: qwinsta
      - name: cmd /v
        run: cmd /v
      - name: reg query "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"
        run: reg query "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon"
      - name: dir "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup"
        run: dir "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup"
      - name: dir "%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup"
        run: dir "%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup"
      - name: reg query HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run
        run: reg query HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run
      - name: reg query HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce
        run: reg query HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce
      - name: reg query HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
        run: reg query HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
      - name: reg query HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce
        run: |
          reg query HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce
          exit 0
      - name: wmic startup get caption, command
        run: wmic startup get caption, command
      - name: Get-CimInstance Win32_StartupCommand
        shell: powershell
        run: Get-CimInstance Win32_StartupCommand
      - name: Print-ProcessTree
        shell: powershell
        run: |
          $Services = Get-CimInstance -ClassName Win32_Service
          function Get-ProcessAndChildProcesses($Level, $Process) {
              # https://learn.microsoft.com/en-us/windows/win32/cimwin32prov/win32-process
              # P4 = Idle; P8 = Normal; P13 = High
              $svc = $Services | Where-Object -Property ProcessID -EQ $Process.ProcessId | Select-Object -ExpandProperty Name
              $suffix = $Process.ExecutablePath
              if (!$suffix) {
                $suffix = $Process.Name
              }
              if ($svc) {
                $suffix += "  (" + [string]::Join(", ", $svc) + ")"
              }
              try {
                $Owner = $Process.GetOwner().User
              } catch {
                $Owner = "<Unknown>"
              }
              Write-Host "$('  ' * $Level)- $($Process.ProcessId.ToString().PadRight(6)) P$($Process.Priority.ToString().PadRight(1)) $($Process.HandleCount.ToString().PadLeft(5)) handles; $([math]::Round($Process.WorkingSetSize/1048576., 1).ToString().PadLeft(5)) Mib RSS; $([math]::Round($Process.UserModeTime/10000000., 1).ToString().PadLeft(4))s  $Owner  $suffix"
              $Children = $AllProcesses | Where-Object {$_.ParentProcessId -eq $Process.ProcessId -and $_.CreationDate -ge $Process.CreationDate}
              if ($null -ne $Children) {
                  foreach ($Child in ($Children | Sort-Object -Property ProcessId)) {
                      Get-ProcessAndChildProcesses ($Level + 1) $Child
                  }
              }
          }
          # We cannot retrieve the process owner with Get-CimInstance.
          $AllProcesses = Get-WmiObject -ClassName Win32_Process -EnableAllPrivileges
          $RootProcesses = @()
          # Skip "System Idle Process", the first item, as ProcessId and ParentProcessId are 0.
          foreach ($Process in $AllProcesses[1..($AllProcesses.length-1)]) {
              $Parent = $AllProcesses | Where-Object {$_.ProcessId -eq $Process.ParentProcessId -and $_.CreationDate -lt $Process.CreationDate}
              if ($null -eq $Parent) {
                  $RootProcesses += $Process
              }
          }
          foreach ($Process in ($RootProcesses | Sort-Object -Property ProcessId)) {
              Get-ProcessAndChildProcesses 0 $Process
          }
      - name: Get-ScheduledTask
        shell: powershell
        run: Get-ScheduledTask
      - name: Get-ScheduledTask -TaskName RunnerMachineProvisioner | Export-ScheduledTask
        shell: powershell
        run: Get-ScheduledTask -TaskName RunnerMachineProvisioner | Export-ScheduledTask
      - name: dir /a c:\actions\runner-provisioner-Windows
        run: dir /a c:\actions\runner-provisioner-Windows
      - name: dir /a c:\actions\settings
        run: dir /a c:\actions\settings
      - name: Get-WmiObject -Class Win32_Product | Select-Object -Property Name,Version | Sort-Object -Property Name
        shell: powershell
        run: Get-WmiObject -Class Win32_Product | Select-Object -Property Name,Version | Sort-Object -Property Name
      - name: Take screenshot
        shell: powershell
        run: |
          Add-Type -AssemblyName System.Windows.Forms,System.Drawing
          $screens = [Windows.Forms.Screen]::AllScreens
          $top    = ($screens.Bounds.Top    | Measure-Object -Minimum).Minimum
          $left   = ($screens.Bounds.Left   | Measure-Object -Minimum).Minimum
          $right  = ($screens.Bounds.Right  | Measure-Object -Maximum).Maximum
          $bottom = ($screens.Bounds.Bottom | Measure-Object -Maximum).Maximum
          $bounds   = [Drawing.Rectangle]::FromLTRB($left, $top, $right, $bottom)
          $bmp      = New-Object System.Drawing.Bitmap ([int]$bounds.width), ([int]$bounds.height)
          $graphics = [Drawing.Graphics]::FromImage($bmp)
          $graphics.CopyFromScreen($bounds.Location, [Drawing.Point]::Empty, $bounds.size)
          $bmp.Save("screenshot.png")
          $graphics.Dispose()
          $bmp.Dispose()
      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        with:
          name: screenshot.png
          path: screenshot.png
          compression-level: 0
          retention-days: 2
